//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiabetApp
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;

    public partial class Diary_Line:PropertyClass
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Diary_Line()
        {
            this.Diary_Product = new HashSet<Diary_Product>();
        }

        double he;
        double dose;
        double doseHe;
        double doseLower;
        double activeDose;
        double carbohydrates_Coef;
        double basal;
        bool isDoseLower;
        public int ID { get; set; }
        public Nullable<System.TimeSpan> Time { get; set; }
        public Nullable<float> Glucose { get; set; }
        public Nullable<int> ID_GeneralDiary_Person { get; set; }
        public Nullable<bool> IsDoseLower
        {
            get { return isDoseLower; }
            set
            {
                isDoseLower = (bool)value; OnPropertyChanged("IsDoseLower");
            }
        }
        public double He
        {
            get { return HECalculation(Diary_Product.ToList()); }
            set { he = value; OnPropertyChanged("He"); }
        }
        public double Dose
        {
            get { return Math.Round(DoseCalculation(), 1); }
            set { dose = value; OnPropertyChanged("Dose"); }
        }
        public double DoseHe
        {
            get { return Math.Round(DoseHeCalculation(), 1); }
            set { doseHe = value; OnPropertyChanged("DoseHe"); }
        }
        public float? Carbohydrates_Coef
        {
            get { return App.db.Dose_Profile.ToList().Find(c => c.Time_Begin <= Time && c.Time_End >= Time && c.Profile == App.diary_View.Selected_Profile && c.ID_Type_Coefficient == 2).Coefficient; }
            set { carbohydrates_Coef = (double)value; OnPropertyChanged("Carbohydrates_Coef"); }
        }
        public float? Basal
        {
            get { return App.db.Dose_Profile.ToList().Find(c => c.Time_Begin <= Time && c.Time_End >= Time && c.Profile == App.diary_View.Selected_Profile && c.ID_Type_Coefficient == 1).Coefficient; }
            set { basal = (double)value; OnPropertyChanged("Basal"); }
        }
        public double DoseLower
        {
            get
            {
                if (IsDoseLower == false)
                {
                    return 0;
                }
                else
                {
                    double active = (double)Math.Round(DoseLowerCalculation() - ActiveDose, 1);
                    if (active > 0)
                    {
                        return active;
                    }
                    else
                    {
                        return 0;
                    }
                }
            }
            set { doseLower = value; OnPropertyChanged("DoseLower"); }
        }
        public float HECalculation(List<Diary_Product> diary_Product)
        {
            float he = 0;
            if (diary_Product == null)
            {
                return 0;
            }
            else
            {
                foreach (var item in diary_Product)
                {
                    he += (float)item.HE;
                    //he += (float)item.Grams * (float)item.Product.Carbohydrates/100/10;
                }
                return he;
            }
        }
        public float DoseHeCalculation()
        {
            
            return  (float)(He * Carbohydrates_Coef);
            
        }



        public float StandartDoseLower()
        {
            return (float)((Glucose - App.diary_View.Selected_Profile.MaxGlucose) / App.diary_View.Selected_Profile.Sensitivity);
        }
        public float DoseLowerCalculation()
        {

            if (Glucose >= App.diary_View.Selected_Profile.MaxGlucose)
            {
                return StandartDoseLower();
            }
            else if (Glucose <= App.diary_View.Selected_Profile.MinGlucose)
            {
                return (float)((Glucose - App.diary_View.Selected_Profile.MinGlucose) / App.diary_View.Selected_Profile.Sensitivity);
            }
            else
            {
                return 0;
            }
        }
        public float DoseCalculation()
        {
            float fulldose = (float)(DoseHeCalculation() + DoseLower);

            if (fulldose < 0)
            {
                return 0;
            }
            else
            {
                return fulldose;
            }
        }
        public float ActiveDoseCalculation()
        {
            Diary_Line rowOfDiaries = App.diary_View.Diary_Lines.ToList().Where(c =>
            c.Time < Time && c.Time >= Time - new TimeSpan(4, 0, 0)
            && c.GeneralDiary_Person.Date == App.diary_View.Selected_DateTime
            && c.IsDoseLower == true).OrderByDescending(c => c.Time).FirstOrDefault();
            //разница во времени между текущей строкой и найденной строкой
            if (rowOfDiaries != null)
            {
                TimeSpan timeSpan = (TimeSpan)(Time - rowOfDiaries.Time);
                //Перевели в минуты
                double timedoseHour = timeSpan.TotalMinutes / 60 / 4;
                return (float)((rowOfDiaries.ActiveDose + rowOfDiaries.DoseLower) * (1 - timedoseHour));
                //return (float)((float)(rowOfDiaries.ActiveDose + rowOfDiaries.DoseLower) - 
                //    (timedoseHour * (rowOfDiaries.ActiveDose + rowOfDiaries.DoseLower)));
            }
            else
            {
                return 0;
            }
        }
        public float ActiveDose
        {
            get
            {
                float Metod()
                {
                    return (float)Math.Round(ActiveDoseCalculation(), 1);
                }
                Task<float> Metod2()
                { 
                    Task<float> dosetask = new Task<float>(Metod);
                    dosetask.Start();
                    return dosetask;
                }

                float dose = Metod2().Result;
                //float dose = (float)Math.Round(ActiveDoseCalculation(), 1);
                if (dose < 0)
                {
                    return 0;
                }
                else
                {
                    return dose;
                }
            }
            set
            {
                activeDose = value; OnPropertyChanged("ActiveDose");
            }
        }

        float Metod()
        {
            return (float)Math.Round(ActiveDoseCalculation(), 1);
        }
        Task<float> Metod2()
        {
            Task<float> dosetask = new Task<float>(Metod);
            dosetask.Start();
            return dosetask;
        }




        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Diary_Product> Diary_Product { get; set; }
        public virtual GeneralDiary_Person GeneralDiary_Person { get; set; }
    }
}
